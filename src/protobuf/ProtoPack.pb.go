// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ProtoPack.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("ProtoPack.proto", fileDescriptor_287f7a178cdcfbdf) }

var fileDescriptor_287f7a178cdcfbdf = []byte{
	// 101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0f, 0x28, 0xca, 0x2f,
	0xc9, 0x0f, 0x48, 0x4c, 0xce, 0xd6, 0x2b, 0x00, 0xb1, 0x84, 0x38, 0xc0, 0x54, 0x52, 0x69, 0x9a,
	0x94, 0x50, 0x70, 0x6a, 0x51, 0x59, 0x66, 0x72, 0x2a, 0x58, 0x05, 0x44, 0xd6, 0xc8, 0x9f, 0x8b,
	0x2b, 0xc4, 0x39, 0x00, 0x2a, 0x21, 0xe4, 0xc8, 0xc5, 0x8f, 0x50, 0x93, 0x5e, 0x94, 0x5a, 0x5c,
	0x2c, 0x24, 0xa6, 0x07, 0xd3, 0xaf, 0x07, 0xd6, 0xe7, 0x9b, 0x5a, 0x5c, 0x9c, 0x98, 0x9e, 0x2a,
	0x85, 0x43, 0x3c, 0x89, 0x0d, 0x2c, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x98, 0xab, 0x3f,
	0x18, 0x88, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TCPServiceClient is the client API for TCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TCPServiceClient interface {
	ServiceProgress(ctx context.Context, in *ProtoMessage, opts ...grpc.CallOption) (*ProtoMessage, error)
}

type tCPServiceClient struct {
	cc *grpc.ClientConn
}

func NewTCPServiceClient(cc *grpc.ClientConn) TCPServiceClient {
	return &tCPServiceClient{cc}
}

func (c *tCPServiceClient) ServiceProgress(ctx context.Context, in *ProtoMessage, opts ...grpc.CallOption) (*ProtoMessage, error) {
	out := new(ProtoMessage)
	err := c.cc.Invoke(ctx, "/protobuf.TCPService/ServiceProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TCPServiceServer is the server API for TCPService service.
type TCPServiceServer interface {
	ServiceProgress(context.Context, *ProtoMessage) (*ProtoMessage, error)
}

func RegisterTCPServiceServer(s *grpc.Server, srv TCPServiceServer) {
	s.RegisterService(&_TCPService_serviceDesc, srv)
}

func _TCPService_ServiceProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCPServiceServer).ServiceProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.TCPService/ServiceProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCPServiceServer).ServiceProgress(ctx, req.(*ProtoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _TCPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.TCPService",
	HandlerType: (*TCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceProgress",
			Handler:    _TCPService_ServiceProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ProtoPack.proto",
}
